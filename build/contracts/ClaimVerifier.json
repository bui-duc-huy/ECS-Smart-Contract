{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimType",
          "type": "uint256"
        }
      ],
      "name": "ClaimInvalid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimType",
          "type": "uint256"
        }
      ],
      "name": "ClaimValid",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IIdentity",
          "name": "_trustedIssuer",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimType",
          "type": "uint256"
        }
      ],
      "name": "checkClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IIdentity",
          "name": "_trustedIssuer",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimType",
          "type": "uint256"
        }
      ],
      "name": "claimIsValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "11": "contracts/interfaces/bases/IIdentity.sol",
    "2": "contracts/ClaimVerifer.sol",
    "21": "contracts/libraries/ECDSA.sol",
    "22": "contracts/libraries/ERC165.sol",
    "25": "contracts/libraries/ERC725.sol",
    "26": "contracts/libraries/ERC735.sol"
  },
  "ast": {
    "absolutePath": "contracts/ClaimVerifer.sol",
    "exportedSymbols": {
      "ClaimVerifier": [
        650
      ]
    },
    "id": 651,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 511,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "absolutePath": "contracts/interfaces/bases/IIdentity.sol",
        "file": "./interfaces/bases/IIdentity.sol",
        "id": 512,
        "nodeType": "ImportDirective",
        "scope": 651,
        "sourceUnit": 2473,
        "src": "24:42:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/libraries/ECDSA.sol",
        "file": "./libraries/ECDSA.sol",
        "id": 513,
        "nodeType": "ImportDirective",
        "scope": 651,
        "sourceUnit": 3587,
        "src": "67:31:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 650,
        "linearizedBaseContracts": [
          650
        ],
        "name": "ClaimVerifier",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 519,
            "name": "ClaimValid",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 518,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 515,
                  "indexed": false,
                  "name": "_identity",
                  "nodeType": "VariableDeclaration",
                  "scope": 519,
                  "src": "146:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$2472",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 514,
                    "name": "IIdentity",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2472,
                    "src": "146:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$2472",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 517,
                  "indexed": false,
                  "name": "claimType",
                  "nodeType": "VariableDeclaration",
                  "scope": 519,
                  "src": "167:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 516,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "167:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "145:40:2"
            },
            "src": "129:57:2"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 525,
            "name": "ClaimInvalid",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 521,
                  "indexed": false,
                  "name": "_identity",
                  "nodeType": "VariableDeclaration",
                  "scope": 525,
                  "src": "210:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$2472",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 520,
                    "name": "IIdentity",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2472,
                    "src": "210:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$2472",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 523,
                  "indexed": false,
                  "name": "claimType",
                  "nodeType": "VariableDeclaration",
                  "scope": 525,
                  "src": "231:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 522,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "231:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "209:40:2"
            },
            "src": "191:59:2"
          },
          {
            "body": {
              "id": 558,
              "nodeType": "Block",
              "src": "365:258:2",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 537,
                        "name": "_trustedIssuer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 527,
                        "src": "392:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IIdentity_$2472",
                          "typeString": "contract IIdentity"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 538,
                        "name": "_identity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 529,
                        "src": "408:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IIdentity_$2472",
                          "typeString": "contract IIdentity"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 539,
                        "name": "_claimType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 531,
                        "src": "419:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IIdentity_$2472",
                          "typeString": "contract IIdentity"
                        },
                        {
                          "typeIdentifier": "t_contract$_IIdentity_$2472",
                          "typeString": "contract IIdentity"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 536,
                      "name": "claimIsValid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 649,
                      "src": "379:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IIdentity_$2472_$_t_contract$_IIdentity_$2472_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (contract IIdentity,contract IIdentity,uint256) returns (bool)"
                      }
                    },
                    "id": 540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "379:51:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 556,
                    "nodeType": "Block",
                    "src": "526:91:2",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 550,
                              "name": "_identity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "558:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IIdentity_$2472",
                                "typeString": "contract IIdentity"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 551,
                              "name": "_claimType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "569:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IIdentity_$2472",
                                "typeString": "contract IIdentity"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 549,
                            "name": "ClaimInvalid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 525,
                            "src": "545:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_contract$_IIdentity_$2472_$_t_uint256_$returns$__$",
                              "typeString": "function (contract IIdentity,uint256)"
                            }
                          },
                          "id": 552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "545:35:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 553,
                        "nodeType": "EmitStatement",
                        "src": "540:40:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 554,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "601:5:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 535,
                        "id": 555,
                        "nodeType": "Return",
                        "src": "594:12:2"
                      }
                    ]
                  },
                  "id": 557,
                  "nodeType": "IfStatement",
                  "src": "375:242:2",
                  "trueBody": {
                    "id": 548,
                    "nodeType": "Block",
                    "src": "432:88:2",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 542,
                              "name": "_identity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "462:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IIdentity_$2472",
                                "typeString": "contract IIdentity"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 543,
                              "name": "_claimType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "473:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IIdentity_$2472",
                                "typeString": "contract IIdentity"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 541,
                            "name": "ClaimValid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 519,
                            "src": "451:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_contract$_IIdentity_$2472_$_t_uint256_$returns$__$",
                              "typeString": "function (contract IIdentity,uint256)"
                            }
                          },
                          "id": 544,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "451:33:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 545,
                        "nodeType": "EmitStatement",
                        "src": "446:38:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "505:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 535,
                        "id": 547,
                        "nodeType": "Return",
                        "src": "498:11:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 559,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkClaim",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 532,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 527,
                  "name": "_trustedIssuer",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "276:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$2472",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 526,
                    "name": "IIdentity",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2472,
                    "src": "276:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$2472",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 529,
                  "name": "_identity",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "302:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$2472",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 528,
                    "name": "IIdentity",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2472,
                    "src": "302:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$2472",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 531,
                  "name": "_claimType",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "323:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 530,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "323:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "275:67:2"
            },
            "returnParameters": {
              "id": 535,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 534,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "359:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 533,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "359:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "358:6:2"
            },
            "scope": 650,
            "src": "256:367:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 648,
              "nodeType": "Block",
              "src": "740:655:2",
              "statements": [
                {
                  "assignments": [
                    571
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 571,
                      "name": "foundClaimType",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "750:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 570,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "750:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 572,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "750:22:2"
                },
                {
                  "assignments": [
                    574
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 574,
                      "name": "scheme",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "782:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 573,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "782:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 575,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "782:14:2"
                },
                {
                  "assignments": [
                    577
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 577,
                      "name": "issuer",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "806:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 576,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "806:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 578,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "806:14:2"
                },
                {
                  "assignments": [
                    580
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 580,
                      "name": "sig",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "830:16:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 579,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "830:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 581,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "830:16:2"
                },
                {
                  "assignments": [
                    583
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 583,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "856:17:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 582,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "856:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 584,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "856:17:2"
                },
                {
                  "assignments": [
                    586
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 586,
                      "name": "claimId",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "884:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 585,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "884:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 594,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 590,
                            "name": "_trustedIssuer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 561,
                            "src": "929:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IIdentity_$2472",
                              "typeString": "contract IIdentity"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 591,
                            "name": "_claimType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 565,
                            "src": "945:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IIdentity_$2472",
                              "typeString": "contract IIdentity"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 588,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9855,
                            "src": "912:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 589,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "912:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "912:44:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 587,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9862,
                      "src": "902:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "902:55:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "884:73:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 605,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "id": 595,
                          "name": "foundClaimType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 571,
                          "src": "970:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 596,
                          "name": "scheme",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 574,
                          "src": "986:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 597,
                          "name": "issuer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 577,
                          "src": "994:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 598,
                          "name": "sig",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 580,
                          "src": "1002:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 599,
                          "name": "data",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 583,
                          "src": "1007:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        null
                      ],
                      "id": 600,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "968:46:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$__$",
                        "typeString": "tuple(uint256,uint256,address,bytes memory,bytes memory,)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 603,
                          "name": "claimId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 586,
                          "src": "1036:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 601,
                          "name": "_identity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 563,
                          "src": "1017:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IIdentity_$2472",
                            "typeString": "contract IIdentity"
                          }
                        },
                        "id": 602,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "getClaim",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 9421,
                        "src": "1017:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_uint256_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$",
                          "typeString": "function (bytes32) view external returns (uint256,uint256,address,bytes memory,bytes memory,string memory)"
                        }
                      },
                      "id": 604,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1017:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$",
                        "typeString": "tuple(uint256,uint256,address,bytes memory,bytes memory,string memory)"
                      }
                    },
                    "src": "968:76:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 606,
                  "nodeType": "ExpressionStatement",
                  "src": "968:76:2"
                },
                {
                  "assignments": [
                    608
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 608,
                      "name": "dataHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "1054:16:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 607,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1054:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 617,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 612,
                            "name": "_identity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 563,
                            "src": "1100:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IIdentity_$2472",
                              "typeString": "contract IIdentity"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 613,
                            "name": "_claimType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 565,
                            "src": "1111:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 614,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 583,
                            "src": "1123:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IIdentity_$2472",
                              "typeString": "contract IIdentity"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 610,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9855,
                            "src": "1083:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1083:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 615,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1083:45:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 609,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9862,
                      "src": "1073:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 616,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1073:56:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1054:75:2"
                },
                {
                  "assignments": [
                    619
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 619,
                      "name": "prefixedHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "1139:20:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 618,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1139:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 624,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 622,
                        "name": "dataHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 608,
                        "src": "1191:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 620,
                        "name": "ECDSA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3586,
                        "src": "1162:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ECDSA_$3586_$",
                          "typeString": "type(library ECDSA)"
                        }
                      },
                      "id": 621,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toEthSignedMessageHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3585,
                      "src": "1162:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) pure returns (bytes32)"
                      }
                    },
                    "id": 623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1162:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1139:61:2"
                },
                {
                  "assignments": [
                    626
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 626,
                      "name": "recovered",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "1211:17:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 625,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1211:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 632,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 629,
                        "name": "prefixedHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 619,
                        "src": "1245:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 630,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 580,
                        "src": "1259:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 627,
                        "name": "ECDSA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3586,
                        "src": "1231:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ECDSA_$3586_$",
                          "typeString": "type(library ECDSA)"
                        }
                      },
                      "id": 628,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "recover",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3569,
                      "src": "1231:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
                        "typeString": "function (bytes32,bytes memory) pure returns (address)"
                      }
                    },
                    "id": 631,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1231:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1211:52:2"
                },
                {
                  "assignments": [
                    634
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 634,
                      "name": "hashedAddr",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "1274:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 633,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1274:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 641,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 638,
                            "name": "recovered",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 626,
                            "src": "1316:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 636,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9855,
                            "src": "1305:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1305:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 639,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1305:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 635,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9862,
                      "src": "1295:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1295:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1274:53:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 644,
                        "name": "hashedAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 634,
                        "src": "1374:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "33",
                        "id": 645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1386:1:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 642,
                        "name": "_trustedIssuer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 561,
                        "src": "1345:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IIdentity_$2472",
                          "typeString": "contract IIdentity"
                        }
                      },
                      "id": 643,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "keyHasPurpose",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9264,
                      "src": "1345:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (bytes32,uint256) view external returns (bool)"
                      }
                    },
                    "id": 646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1345:43:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 569,
                  "id": 647,
                  "nodeType": "Return",
                  "src": "1338:50:2"
                }
              ]
            },
            "documentation": null,
            "id": 649,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "claimIsValid",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 566,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 561,
                  "name": "_trustedIssuer",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "651:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$2472",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 560,
                    "name": "IIdentity",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2472,
                    "src": "651:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$2472",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 563,
                  "name": "_identity",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "677:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$2472",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 562,
                    "name": "IIdentity",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2472,
                    "src": "677:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$2472",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 565,
                  "name": "_claimType",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "698:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 564,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "698:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "650:67:2"
            },
            "returnParameters": {
              "id": 569,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 568,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "734:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 567,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "734:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "733:6:2"
            },
            "scope": 650,
            "src": "629:766:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 651,
        "src": "100:1297:2"
      }
    ],
    "src": "0:1398:2"
  },
  "bytecode": "608060405234801561001057600080fd5b50610732806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630803a73e1461003b57806380a7db5e14610085575b600080fd5b6100716004803603606081101561005157600080fd5b506001600160a01b038135811691602081013590911690604001356100bb565b604080519115158252519081900360200190f35b6100716004803603606081101561009b57600080fd5b506001600160a01b03813581169160208101359091169060400135610168565b60006100c8848484610168565b1561011957604080516001600160a01b03851681526020810184905281517f5637aa6b77cde2de563765b75a65099af73d3bf22cb9d089a64a01777823208e929181900390910190a1506001610161565b604080516001600160a01b03851681526020810184905281517fc1e461cfcaa9ff5efbb053582a325fbfebec1d94ac7e9d9958ee7f74c2b6b558929181900390910190a15060005b9392505050565b6000806000806060806000898860405160200180836001600160a01b03166001600160a01b031660601b815260140182815260200192505050604051602081830303815290604052805190602001209050886001600160a01b031663c9100bcb826040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156101fd57600080fd5b505afa158015610211573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c081101561023a57600080fd5b81516020830151604080850151606086018051925194969395919493918201928464010000000082111561026d57600080fd5b90830190602082018581111561028257600080fd5b825164010000000081118282018810171561029c57600080fd5b82525081516020918201929091019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561031957600080fd5b90830190602082018581111561032e57600080fd5b825164010000000081118282018810171561034857600080fd5b82525081516020918201929091019080838360005b8381101561037557818101518382015260200161035d565b50505050905090810190601f1680156103a25780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156103c557600080fd5b9083019060208201858111156103da57600080fd5b82516401000000008111828201881017156103f457600080fd5b82525081516020918201929091019080838360005b83811015610421578181015183820152602001610409565b50505050905090810190601f16801561044e5780820380516001836020036101000a031916815260200191505b5060405250505050809650819750829850839950849a505050505050600089898460405160200180846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106104c25780518252601f1990920191602091820191016104a3565b6001836020036101000a0380198251168184511680821785525050505050509050019350505050604051602081830303815290604052805190602001209050600061050c826105e4565b9050600061051a8287610635565b905060008160405160200180826001600160a01b03166001600160a01b031681526020019150506040516020818303038152906040528051906020012090508d6001600160a01b031663d202158d8260036040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d60208110156105d057600080fd5b50519e9d5050505050505050505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008151604114610648575060006106f7565b60208201516040830151606084015160001a601b81101561066757601b015b8060ff16601b1415801561067f57508060ff16601c14155b1561069057600093505050506106f7565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156106e7573d6000803e3d6000fd5b5050506020604051035193505050505b9291505056fea265627a7a723158201e0a8e890907c0adba37b467bdd5026e7b573500185510e9695b654d5ada728064736f6c63430005110032",
  "bytecodeSha1": "2b43cc41e8fec9486b736dda2a426f9e95c2865a",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.5.17+commit.d19bba13"
  },
  "contractName": "ClaimVerifier",
  "coverageMap": {
    "branches": {
      "11": {},
      "2": {
        "ClaimVerifier.checkClaim": {
          "11": [
            379,
            430,
            false
          ]
        }
      },
      "21": {
        "ECDSA.recover": {
          "12": [
            1368,
            1390,
            false
          ],
          "13": [
            3028,
            3034,
            false
          ],
          "14": [
            3082,
            3089,
            false
          ],
          "15": [
            3093,
            3100,
            false
          ]
        }
      },
      "22": {},
      "25": {},
      "26": {}
    },
    "statements": {
      "11": {},
      "2": {
        "ClaimVerifier.checkClaim": {
          "0": [
            446,
            484
          ],
          "1": [
            498,
            509
          ],
          "2": [
            540,
            580
          ],
          "3": [
            594,
            606
          ]
        },
        "ClaimVerifier.claimIsValid": {
          "4": [
            968,
            1044
          ],
          "5": [
            1338,
            1388
          ]
        }
      },
      "21": {
        "ECDSA.recover": {
          "7": [
            1406,
            1425
          ],
          "8": [
            3050,
            3057
          ],
          "9": [
            3116,
            3133
          ],
          "10": [
            3238,
            3269
          ]
        },
        "ECDSA.toEthSignedMessageHash": {
          "6": [
            3742,
            3818
          ]
        }
      },
      "22": {},
      "25": {},
      "26": {}
    }
  },
  "dependencies": [
    "ECDSA",
    "ERC165",
    "ERC725",
    "ERC735",
    "IERC165",
    "IIdentity"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c80630803a73e1461003b57806380a7db5e14610085575b600080fd5b6100716004803603606081101561005157600080fd5b506001600160a01b038135811691602081013590911690604001356100bb565b604080519115158252519081900360200190f35b6100716004803603606081101561009b57600080fd5b506001600160a01b03813581169160208101359091169060400135610168565b60006100c8848484610168565b1561011957604080516001600160a01b03851681526020810184905281517f5637aa6b77cde2de563765b75a65099af73d3bf22cb9d089a64a01777823208e929181900390910190a1506001610161565b604080516001600160a01b03851681526020810184905281517fc1e461cfcaa9ff5efbb053582a325fbfebec1d94ac7e9d9958ee7f74c2b6b558929181900390910190a15060005b9392505050565b6000806000806060806000898860405160200180836001600160a01b03166001600160a01b031660601b815260140182815260200192505050604051602081830303815290604052805190602001209050886001600160a01b031663c9100bcb826040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156101fd57600080fd5b505afa158015610211573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c081101561023a57600080fd5b81516020830151604080850151606086018051925194969395919493918201928464010000000082111561026d57600080fd5b90830190602082018581111561028257600080fd5b825164010000000081118282018810171561029c57600080fd5b82525081516020918201929091019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561031957600080fd5b90830190602082018581111561032e57600080fd5b825164010000000081118282018810171561034857600080fd5b82525081516020918201929091019080838360005b8381101561037557818101518382015260200161035d565b50505050905090810190601f1680156103a25780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156103c557600080fd5b9083019060208201858111156103da57600080fd5b82516401000000008111828201881017156103f457600080fd5b82525081516020918201929091019080838360005b83811015610421578181015183820152602001610409565b50505050905090810190601f16801561044e5780820380516001836020036101000a031916815260200191505b5060405250505050809650819750829850839950849a505050505050600089898460405160200180846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106104c25780518252601f1990920191602091820191016104a3565b6001836020036101000a0380198251168184511680821785525050505050509050019350505050604051602081830303815290604052805190602001209050600061050c826105e4565b9050600061051a8287610635565b905060008160405160200180826001600160a01b03166001600160a01b031681526020019150506040516020818303038152906040528051906020012090508d6001600160a01b031663d202158d8260036040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d60208110156105d057600080fd5b50519e9d5050505050505050505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008151604114610648575060006106f7565b60208201516040830151606084015160001a601b81101561066757601b015b8060ff16601b1415801561067f57508060ff16601c14155b1561069057600093505050506106f7565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156106e7573d6000803e3d6000fd5b5050506020604051035193505050505b9291505056fea265627a7a723158201e0a8e890907c0adba37b467bdd5026e7b573500185510e9695b654d5ada728064736f6c63430005110032",
  "deployedSourceMap": "100:1297:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;100:1297:2;;;;;;;;;;;;;;;;;;;;;;;;256:367;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;256:367:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;629:766;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;629:766:2;;;;;;;;;;;;;;;;;:::i;256:367::-;359:4;379:51;392:14;408:9;419:10;379:12;:51::i;:::-;375:242;;;451:33;;;-1:-1:-1;;;;;451:33:2;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;505:4:2;498:11;;375:242;545:35;;;-1:-1:-1;;;;;545:35:2;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;601:5:2;375:242;256:367;;;;;:::o;629:766::-;734:4;750:22;782:14;806;830:16;856:17;884:15;929:14;945:10;912:44;;;;;;-1:-1:-1;;;;;912:44:2;-1:-1:-1;;;;;912:44:2;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;912:44:2;;;902:55;;;;;;884:73;;1017:9;-1:-1:-1;;;;;1017:18:2;;1036:7;1017:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1017:27:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1017:27:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;1017:27:2;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:3;5:12;;2:2;;;30:1;27;20:12;2:2;1017:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;11:20;;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;372:25;;-1:-1;1017:27:2;;420:4:-1;411:14;;;;1017:27:2;;;;;411:14:-1;1017:27:2;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1017:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;372:25;;-1:-1;1017:27:2;;420:4:-1;411:14;;;;1017:27:2;;;;;411:14:-1;1017:27:2;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1017:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;372:25;;-1:-1;1017:27:2;;420:4:-1;411:14;;;;1017:27:2;;;;;411:14:-1;1017:27:2;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1017:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;968:76;;;;;;;;;;;;;;;;;;;;;1054:16;1100:9;1111:10;1123:4;1083:45;;;;;;-1:-1:-1;;;;;1083:45:2;-1:-1:-1;;;;;1083:45:2;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1083:45:2;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1083:45:2;;;1073:56;;;;;;1054:75;;1139:20;1162:38;1191:8;1162:28;:38::i;:::-;1139:61;;1211:17;1231:32;1245:12;1259:3;1231:13;:32::i;:::-;1211:52;;1274:18;1316:9;1305:21;;;;;;-1:-1:-1;;;;;1305:21:2;-1:-1:-1;;;;;1305:21:2;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1305:21:2;;;1295:32;;;;;;1274:53;;1345:14;-1:-1:-1;;;;;1345:28:2;;1374:10;1386:1;1345:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1345:43:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1345:43:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1345:43:2;;629:766;-1:-1:-1;;;;;;;;;;;;;;629:766:2:o;3560:265:21:-;3759:58;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;3759:58:21;;;;;;;3749:69;;;;;;3560:265::o;1229:2065::-;1307:7;1368:9;:16;1388:2;1368:22;1364:72;;-1:-1:-1;1422:1:21;1406:19;;1364:72;1786:2;1771:18;;1765:25;1829:2;1814:18;;1808:25;1880:2;1865:18;;1859:25;1502:9;1851:34;3032:2;3028:6;;3024:44;;;3055:2;3050:7;3024:44;3082:1;:7;;3087:2;3082:7;;:18;;;;;3093:1;:7;;3098:2;3093:7;;3082:18;3078:66;;;3131:1;3116:17;;;;;;;3078:66;3245:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3245:24:21;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3245:24:21;;;;;;;;3238:31;;;;;1229:2065;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "methods": {}
  },
  "offset": [
    100,
    1397
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x803A73E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x80A7DB5E EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x71 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0xBB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x71 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x168 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8 DUP5 DUP5 DUP5 PUSH2 0x168 JUMP JUMPDEST ISZERO PUSH2 0x119 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x5637AA6B77CDE2DE563765B75A65099AF73D3BF22CB9D089A64A01777823208E SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xC1E461CFCAA9FF5EFBB053582A325FBFEBEC1D94AC7E9D9958EE7F74C2B6B558 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH1 0x0 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC9100BCB DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x211 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD DUP1 MLOAD SWAP3 MLOAD SWAP5 SWAP7 SWAP4 SWAP6 SWAP2 SWAP5 SWAP4 SWAP2 DUP3 ADD SWAP3 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B1 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2F6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3A2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x421 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x409 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x44E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP POP DUP1 SWAP7 POP DUP2 SWAP8 POP DUP3 SWAP9 POP DUP4 SWAP10 POP DUP5 SWAP11 POP POP POP POP POP POP PUSH1 0x0 DUP10 DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x4C2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x50C DUP3 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x51A DUP3 DUP8 PUSH2 0x635 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD202158D DUP3 PUSH1 0x3 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x5C SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 EQ PUSH2 0x648 JUMPI POP PUSH1 0x0 PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH1 0x1B DUP2 LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x1B ADD JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x67F JUMPI POP DUP1 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x690 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP5 AND DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 PUSH1 0x1F NOT DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x1E EXP DUP15 DUP10 MULMOD SMOD 0xC0 0xAD 0xBA CALLDATACOPY 0xB4 PUSH8 0xBDD5026E7B573500 XOR SSTORE LT 0xE9 PUSH10 0x5B654D5ADA728064736F PUSH13 0x63430005110032000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        100,
        1397
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH2",
      "value": "0x10"
    },
    "11": {
      "op": "JUMPI"
    },
    "12": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "14": {
      "op": "DUP1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "op": "JUMPDEST"
    },
    "17": {
      "offset": [
        100,
        1397
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36"
    },
    "25": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x803A73E"
    },
    "38": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "EQ",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B"
    },
    "42": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x80A7DB5E"
    },
    "49": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "EQ",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x85"
    },
    "53": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "57": {
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "DUP1",
      "path": "2"
    },
    "58": {
      "first_revert": true,
      "fn": null,
      "offset": [
        100,
        1397
      ],
      "op": "REVERT",
      "path": "2"
    },
    "59": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "60": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x71"
    },
    "63": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "65": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "67": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SUB",
      "path": "2"
    },
    "68": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "70": {
      "op": "DUP2"
    },
    "71": {
      "op": "LT"
    },
    "72": {
      "op": "ISZERO"
    },
    "73": {
      "op": "PUSH2",
      "value": "0x51"
    },
    "76": {
      "op": "JUMPI"
    },
    "77": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "79": {
      "op": "DUP1"
    },
    "80": {
      "op": "REVERT"
    },
    "81": {
      "op": "JUMPDEST"
    },
    "82": {
      "op": "POP"
    },
    "83": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "85": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "87": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "89": {
      "op": "SHL"
    },
    "90": {
      "op": "SUB"
    },
    "91": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP2",
      "path": "2"
    },
    "92": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "93": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP2",
      "path": "2"
    },
    "94": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "AND",
      "path": "2"
    },
    "95": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "96": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "98": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP2",
      "path": "2"
    },
    "99": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "ADD",
      "path": "2"
    },
    "100": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "101": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "102": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "103": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "AND",
      "path": "2"
    },
    "104": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "105": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "107": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "ADD",
      "path": "2"
    },
    "108": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "109": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBB"
    },
    "112": {
      "fn": "ClaimVerifier.checkClaim",
      "jump": "i",
      "offset": [
        256,
        623
      ],
      "op": "JUMP",
      "path": "2"
    },
    "113": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "114": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "116": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP1",
      "path": "2"
    },
    "117": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "118": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "119": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "120": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "121": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP3",
      "path": "2"
    },
    "122": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "123": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "124": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "125": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "DUP2",
      "path": "2"
    },
    "126": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "127": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SUB",
      "path": "2"
    },
    "128": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "130": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "ADD",
      "path": "2"
    },
    "131": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "132": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "RETURN",
      "path": "2"
    },
    "133": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "134": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x71"
    },
    "137": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "139": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "DUP1",
      "path": "2"
    },
    "140": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "141": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "SUB",
      "path": "2"
    },
    "142": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "144": {
      "op": "DUP2"
    },
    "145": {
      "op": "LT"
    },
    "146": {
      "op": "ISZERO"
    },
    "147": {
      "op": "PUSH2",
      "value": "0x9B"
    },
    "150": {
      "op": "JUMPI"
    },
    "151": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "153": {
      "op": "DUP1"
    },
    "154": {
      "op": "REVERT"
    },
    "155": {
      "op": "JUMPDEST"
    },
    "156": {
      "op": "POP"
    },
    "157": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "159": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "161": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "163": {
      "op": "SHL"
    },
    "164": {
      "op": "SUB"
    },
    "165": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "DUP2",
      "path": "2"
    },
    "166": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "167": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "DUP2",
      "path": "2"
    },
    "168": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "AND",
      "path": "2"
    },
    "169": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "170": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "172": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "DUP2",
      "path": "2"
    },
    "173": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "ADD",
      "path": "2"
    },
    "174": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "175": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "176": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "177": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "AND",
      "path": "2"
    },
    "178": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "179": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "181": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "ADD",
      "path": "2"
    },
    "182": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "183": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168"
    },
    "186": {
      "fn": "ClaimVerifier.claimIsValid",
      "jump": "i",
      "offset": [
        629,
        1395
      ],
      "op": "JUMP",
      "path": "2"
    },
    "187": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "188": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        359,
        363
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "190": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        379,
        430
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC8"
    },
    "193": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        392,
        406
      ],
      "op": "DUP5",
      "path": "2"
    },
    "194": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        408,
        417
      ],
      "op": "DUP5",
      "path": "2"
    },
    "195": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        419,
        429
      ],
      "op": "DUP5",
      "path": "2"
    },
    "196": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        379,
        391
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168"
    },
    "199": {
      "fn": "ClaimVerifier.checkClaim",
      "jump": "i",
      "offset": [
        379,
        430
      ],
      "op": "JUMP",
      "path": "2"
    },
    "200": {
      "branch": 11,
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        379,
        430
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "201": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        375,
        617
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "202": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        375,
        617
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x119"
    },
    "205": {
      "branch": 11,
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        375,
        617
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "206": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 0,
      "value": "0x40"
    },
    "208": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP1",
      "path": "2"
    },
    "209": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "210": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "214": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "216": {
      "op": "SHL"
    },
    "217": {
      "op": "SUB"
    },
    "218": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP6",
      "path": "2"
    },
    "219": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "AND",
      "path": "2"
    },
    "220": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP2",
      "path": "2"
    },
    "221": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "222": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "224": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP2",
      "path": "2"
    },
    "225": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "ADD",
      "path": "2"
    },
    "226": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP5",
      "path": "2"
    },
    "227": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "228": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "229": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP2",
      "path": "2"
    },
    "230": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "231": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x5637AA6B77CDE2DE563765B75A65099AF73D3BF22CB9D089A64A01777823208E"
    },
    "264": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "265": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "266": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "DUP2",
      "path": "2"
    },
    "267": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "268": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SUB",
      "path": "2"
    },
    "269": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "270": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "271": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "ADD",
      "path": "2"
    },
    "272": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "273": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        451,
        484
      ],
      "op": "LOG1",
      "path": "2"
    },
    "274": {
      "op": "POP"
    },
    "275": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        505,
        509
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0x1"
    },
    "277": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        498,
        509
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x161"
    },
    "280": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        498,
        509
      ],
      "op": "JUMP",
      "path": "2"
    },
    "281": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        375,
        617
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "282": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 2,
      "value": "0x40"
    },
    "284": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP1",
      "path": "2"
    },
    "285": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "286": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "288": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "290": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "292": {
      "op": "SHL"
    },
    "293": {
      "op": "SUB"
    },
    "294": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP6",
      "path": "2"
    },
    "295": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "AND",
      "path": "2"
    },
    "296": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP2",
      "path": "2"
    },
    "297": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "298": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "300": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP2",
      "path": "2"
    },
    "301": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "ADD",
      "path": "2"
    },
    "302": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP5",
      "path": "2"
    },
    "303": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "304": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "305": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP2",
      "path": "2"
    },
    "306": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "307": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xC1E461CFCAA9FF5EFBB053582A325FBFEBEC1D94AC7E9D9958EE7F74C2B6B558"
    },
    "340": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "341": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "342": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "DUP2",
      "path": "2"
    },
    "343": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "344": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SUB",
      "path": "2"
    },
    "345": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "346": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "347": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "ADD",
      "path": "2"
    },
    "348": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "349": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        545,
        580
      ],
      "op": "LOG1",
      "path": "2"
    },
    "350": {
      "op": "POP"
    },
    "351": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        601,
        606
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x0"
    },
    "353": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        375,
        617
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "354": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "355": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "356": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "POP",
      "path": "2"
    },
    "357": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "POP",
      "path": "2"
    },
    "358": {
      "fn": "ClaimVerifier.checkClaim",
      "offset": [
        256,
        623
      ],
      "op": "POP",
      "path": "2"
    },
    "359": {
      "fn": "ClaimVerifier.checkClaim",
      "jump": "o",
      "offset": [
        256,
        623
      ],
      "op": "JUMP",
      "path": "2"
    },
    "360": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "361": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        734,
        738
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "363": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        750,
        772
      ],
      "op": "DUP1",
      "path": "2"
    },
    "364": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        782,
        796
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "366": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        806,
        820
      ],
      "op": "DUP1",
      "path": "2"
    },
    "367": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        830,
        846
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "369": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        856,
        873
      ],
      "op": "DUP1",
      "path": "2"
    },
    "370": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        884,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "372": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        929,
        943
      ],
      "op": "DUP10",
      "path": "2"
    },
    "373": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        945,
        955
      ],
      "op": "DUP9",
      "path": "2"
    },
    "374": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "376": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "377": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "379": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "ADD",
      "path": "2"
    },
    "380": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "DUP1",
      "path": "2"
    },
    "381": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "DUP4",
      "path": "2"
    },
    "382": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "384": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "386": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "388": {
      "op": "SHL"
    },
    "389": {
      "op": "SUB"
    },
    "390": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "AND",
      "path": "2"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "393": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "395": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "397": {
      "op": "SHL"
    },
    "398": {
      "op": "SUB"
    },
    "399": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "AND",
      "path": "2"
    },
    "400": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "402": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "SHL",
      "path": "2"
    },
    "403": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "DUP2",
      "path": "2"
    },
    "404": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "405": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x14"
    },
    "407": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "ADD",
      "path": "2"
    },
    "408": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "DUP3",
      "path": "2"
    },
    "409": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "DUP2",
      "path": "2"
    },
    "410": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "411": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "413": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "ADD",
      "path": "2"
    },
    "414": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "415": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "POP",
      "path": "2"
    },
    "416": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "POP",
      "path": "2"
    },
    "417": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "POP",
      "path": "2"
    },
    "418": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "420": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "421": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "423": {
      "op": "DUP2"
    },
    "424": {
      "op": "DUP4"
    },
    "425": {
      "op": "SUB"
    },
    "426": {
      "op": "SUB"
    },
    "427": {
      "op": "DUP2"
    },
    "428": {
      "op": "MSTORE"
    },
    "429": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "430": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "432": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        912,
        956
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "433": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        902,
        957
      ],
      "op": "DUP1",
      "path": "2"
    },
    "434": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        902,
        957
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "435": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        902,
        957
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "436": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        902,
        957
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "438": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        902,
        957
      ],
      "op": "ADD",
      "path": "2"
    },
    "439": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        902,
        957
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "440": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        884,
        957
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "441": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        884,
        957
      ],
      "op": "POP",
      "path": "2"
    },
    "442": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1026
      ],
      "op": "DUP9",
      "path": "2",
      "statement": 4
    },
    "443": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "445": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "447": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "449": {
      "op": "SHL"
    },
    "450": {
      "op": "SUB"
    },
    "451": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1035
      ],
      "op": "AND",
      "path": "2"
    },
    "452": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1035
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC9100BCB"
    },
    "457": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1036,
        1043
      ],
      "op": "DUP3",
      "path": "2"
    },
    "458": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "460": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "461": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "462": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xFFFFFFFF"
    },
    "467": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "468": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "470": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SHL",
      "path": "2"
    },
    "471": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "472": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "473": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "475": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "476": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "477": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "478": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "479": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "480": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "482": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "483": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "484": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "485": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "486": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "488": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "490": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "491": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "492": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "493": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "494": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "495": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP7",
      "path": "2"
    },
    "496": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "497": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "498": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "499": {
      "op": "DUP1"
    },
    "500": {
      "op": "ISZERO"
    },
    "501": {
      "op": "PUSH2",
      "value": "0x1FD"
    },
    "504": {
      "op": "JUMPI"
    },
    "505": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "507": {
      "op": "DUP1"
    },
    "508": {
      "op": "REVERT"
    },
    "509": {
      "op": "JUMPDEST"
    },
    "510": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "511": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "GAS",
      "path": "2"
    },
    "512": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "513": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "514": {
      "op": "DUP1"
    },
    "515": {
      "op": "ISZERO"
    },
    "516": {
      "op": "PUSH2",
      "value": "0x211"
    },
    "519": {
      "op": "JUMPI"
    },
    "520": {
      "op": "RETURNDATASIZE"
    },
    "521": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "523": {
      "op": "DUP1"
    },
    "524": {
      "op": "RETURNDATACOPY"
    },
    "525": {
      "op": "RETURNDATASIZE"
    },
    "526": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "528": {
      "op": "REVERT"
    },
    "529": {
      "op": "JUMPDEST"
    },
    "530": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "531": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "532": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "533": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "534": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "536": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "537": {
      "op": "RETURNDATASIZE"
    },
    "538": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "540": {
      "op": "DUP3"
    },
    "541": {
      "op": "RETURNDATACOPY"
    },
    "542": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "544": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "545": {
      "op": "SWAP1"
    },
    "546": {
      "op": "DUP2"
    },
    "547": {
      "op": "ADD"
    },
    "548": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "550": {
      "op": "NOT"
    },
    "551": {
      "op": "AND"
    },
    "552": {
      "op": "DUP3"
    },
    "553": {
      "op": "ADD"
    },
    "554": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "556": {
      "op": "MSTORE"
    },
    "557": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "559": {
      "op": "DUP2"
    },
    "560": {
      "op": "LT"
    },
    "561": {
      "op": "ISZERO"
    },
    "562": {
      "op": "PUSH2",
      "value": "0x23A"
    },
    "565": {
      "op": "JUMPI"
    },
    "566": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "568": {
      "op": "DUP1"
    },
    "569": {
      "op": "REVERT"
    },
    "570": {
      "op": "JUMPDEST"
    },
    "571": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "572": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "573": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "575": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "576": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "577": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "578": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "580": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "581": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP6",
      "path": "2"
    },
    "582": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "583": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "584": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "586": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP7",
      "path": "2"
    },
    "587": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "588": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "589": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "590": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "591": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "592": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "593": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "594": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "595": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "596": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "597": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "598": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "599": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "600": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "601": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "602": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "603": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP5",
      "path": "2"
    },
    "604": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "610": {
      "op": "DUP3"
    },
    "611": {
      "op": "GT"
    },
    "612": {
      "op": "ISZERO"
    },
    "613": {
      "op": "PUSH2",
      "value": "0x26D"
    },
    "616": {
      "op": "JUMPI"
    },
    "617": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "619": {
      "op": "DUP1"
    },
    "620": {
      "op": "REVERT"
    },
    "621": {
      "op": "JUMPDEST"
    },
    "622": {
      "op": "SWAP1"
    },
    "623": {
      "op": "DUP4"
    },
    "624": {
      "op": "ADD"
    },
    "625": {
      "op": "SWAP1"
    },
    "626": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "628": {
      "op": "DUP3"
    },
    "629": {
      "op": "ADD"
    },
    "630": {
      "op": "DUP6"
    },
    "631": {
      "op": "DUP2"
    },
    "632": {
      "op": "GT"
    },
    "633": {
      "op": "ISZERO"
    },
    "634": {
      "op": "PUSH2",
      "value": "0x282"
    },
    "637": {
      "op": "JUMPI"
    },
    "638": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "640": {
      "op": "DUP1"
    },
    "641": {
      "op": "REVERT"
    },
    "642": {
      "op": "JUMPDEST"
    },
    "643": {
      "op": "DUP3"
    },
    "644": {
      "op": "MLOAD"
    },
    "645": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "651": {
      "op": "DUP2"
    },
    "652": {
      "op": "GT"
    },
    "653": {
      "op": "DUP3"
    },
    "654": {
      "op": "DUP3"
    },
    "655": {
      "op": "ADD"
    },
    "656": {
      "op": "DUP9"
    },
    "657": {
      "op": "LT"
    },
    "658": {
      "op": "OR"
    },
    "659": {
      "op": "ISZERO"
    },
    "660": {
      "op": "PUSH2",
      "value": "0x29C"
    },
    "663": {
      "op": "JUMPI"
    },
    "664": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "666": {
      "op": "DUP1"
    },
    "667": {
      "op": "REVERT"
    },
    "668": {
      "op": "JUMPDEST"
    },
    "669": {
      "op": "DUP3"
    },
    "670": {
      "op": "MSTORE"
    },
    "671": {
      "op": "POP"
    },
    "672": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "673": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "674": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "676": {
      "op": "SWAP2"
    },
    "677": {
      "op": "DUP3"
    },
    "678": {
      "op": "ADD"
    },
    "679": {
      "op": "SWAP3"
    },
    "680": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "681": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "682": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "683": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "684": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "685": {
      "op": "DUP4"
    },
    "686": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "689": {
      "op": "JUMPDEST"
    },
    "690": {
      "op": "DUP4"
    },
    "691": {
      "op": "DUP2"
    },
    "692": {
      "op": "LT"
    },
    "693": {
      "op": "ISZERO"
    },
    "694": {
      "op": "PUSH2",
      "value": "0x2C9"
    },
    "697": {
      "op": "JUMPI"
    },
    "698": {
      "op": "DUP2"
    },
    "699": {
      "op": "DUP2"
    },
    "700": {
      "op": "ADD"
    },
    "701": {
      "op": "MLOAD"
    },
    "702": {
      "op": "DUP4"
    },
    "703": {
      "op": "DUP3"
    },
    "704": {
      "op": "ADD"
    },
    "705": {
      "op": "MSTORE"
    },
    "706": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "708": {
      "op": "ADD"
    },
    "709": {
      "op": "PUSH2",
      "value": "0x2B1"
    },
    "712": {
      "op": "JUMP"
    },
    "713": {
      "op": "JUMPDEST"
    },
    "714": {
      "op": "POP"
    },
    "715": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "716": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "717": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "718": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "719": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "720": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "721": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "722": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "723": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "724": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "726": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "727": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "728": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "729": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F6"
    },
    "732": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "733": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "734": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "735": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "736": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "737": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "738": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "740": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "741": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "743": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "744": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "747": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "EXP",
      "path": "2"
    },
    "748": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "749": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "NOT",
      "path": "2"
    },
    "750": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "751": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "752": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "753": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "755": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "756": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "757": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "758": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "759": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "760": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "762": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "763": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "765": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "766": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "767": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "768": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "770": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "771": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "772": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "773": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "774": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "775": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP5",
      "path": "2"
    },
    "776": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "782": {
      "op": "DUP3"
    },
    "783": {
      "op": "GT"
    },
    "784": {
      "op": "ISZERO"
    },
    "785": {
      "op": "PUSH2",
      "value": "0x319"
    },
    "788": {
      "op": "JUMPI"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "791": {
      "op": "DUP1"
    },
    "792": {
      "op": "REVERT"
    },
    "793": {
      "op": "JUMPDEST"
    },
    "794": {
      "op": "SWAP1"
    },
    "795": {
      "op": "DUP4"
    },
    "796": {
      "op": "ADD"
    },
    "797": {
      "op": "SWAP1"
    },
    "798": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "800": {
      "op": "DUP3"
    },
    "801": {
      "op": "ADD"
    },
    "802": {
      "op": "DUP6"
    },
    "803": {
      "op": "DUP2"
    },
    "804": {
      "op": "GT"
    },
    "805": {
      "op": "ISZERO"
    },
    "806": {
      "op": "PUSH2",
      "value": "0x32E"
    },
    "809": {
      "op": "JUMPI"
    },
    "810": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "812": {
      "op": "DUP1"
    },
    "813": {
      "op": "REVERT"
    },
    "814": {
      "op": "JUMPDEST"
    },
    "815": {
      "op": "DUP3"
    },
    "816": {
      "op": "MLOAD"
    },
    "817": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "823": {
      "op": "DUP2"
    },
    "824": {
      "op": "GT"
    },
    "825": {
      "op": "DUP3"
    },
    "826": {
      "op": "DUP3"
    },
    "827": {
      "op": "ADD"
    },
    "828": {
      "op": "DUP9"
    },
    "829": {
      "op": "LT"
    },
    "830": {
      "op": "OR"
    },
    "831": {
      "op": "ISZERO"
    },
    "832": {
      "op": "PUSH2",
      "value": "0x348"
    },
    "835": {
      "op": "JUMPI"
    },
    "836": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "838": {
      "op": "DUP1"
    },
    "839": {
      "op": "REVERT"
    },
    "840": {
      "op": "JUMPDEST"
    },
    "841": {
      "op": "DUP3"
    },
    "842": {
      "op": "MSTORE"
    },
    "843": {
      "op": "POP"
    },
    "844": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "845": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "848": {
      "op": "SWAP2"
    },
    "849": {
      "op": "DUP3"
    },
    "850": {
      "op": "ADD"
    },
    "851": {
      "op": "SWAP3"
    },
    "852": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "853": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "854": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "855": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "856": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "857": {
      "op": "DUP4"
    },
    "858": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "859": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "861": {
      "op": "JUMPDEST"
    },
    "862": {
      "op": "DUP4"
    },
    "863": {
      "op": "DUP2"
    },
    "864": {
      "op": "LT"
    },
    "865": {
      "op": "ISZERO"
    },
    "866": {
      "op": "PUSH2",
      "value": "0x375"
    },
    "869": {
      "op": "JUMPI"
    },
    "870": {
      "op": "DUP2"
    },
    "871": {
      "op": "DUP2"
    },
    "872": {
      "op": "ADD"
    },
    "873": {
      "op": "MLOAD"
    },
    "874": {
      "op": "DUP4"
    },
    "875": {
      "op": "DUP3"
    },
    "876": {
      "op": "ADD"
    },
    "877": {
      "op": "MSTORE"
    },
    "878": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "880": {
      "op": "ADD"
    },
    "881": {
      "op": "PUSH2",
      "value": "0x35D"
    },
    "884": {
      "op": "JUMP"
    },
    "885": {
      "op": "JUMPDEST"
    },
    "886": {
      "op": "POP"
    },
    "887": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "888": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "889": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "890": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "891": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "892": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "893": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "894": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "895": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "896": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "898": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "899": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "900": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "901": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3A2"
    },
    "904": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "905": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "906": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "907": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "908": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "909": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "910": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "912": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "913": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "915": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "916": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "919": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "EXP",
      "path": "2"
    },
    "920": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "921": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "NOT",
      "path": "2"
    },
    "922": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "923": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "924": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "925": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "927": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "928": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "929": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "930": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "931": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "932": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "934": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "935": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "937": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "938": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "939": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "940": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "942": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "943": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "944": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "945": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "946": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "947": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP5",
      "path": "2"
    },
    "948": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "954": {
      "op": "DUP3"
    },
    "955": {
      "op": "GT"
    },
    "956": {
      "op": "ISZERO"
    },
    "957": {
      "op": "PUSH2",
      "value": "0x3C5"
    },
    "960": {
      "op": "JUMPI"
    },
    "961": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "963": {
      "op": "DUP1"
    },
    "964": {
      "op": "REVERT"
    },
    "965": {
      "op": "JUMPDEST"
    },
    "966": {
      "op": "SWAP1"
    },
    "967": {
      "op": "DUP4"
    },
    "968": {
      "op": "ADD"
    },
    "969": {
      "op": "SWAP1"
    },
    "970": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "972": {
      "op": "DUP3"
    },
    "973": {
      "op": "ADD"
    },
    "974": {
      "op": "DUP6"
    },
    "975": {
      "op": "DUP2"
    },
    "976": {
      "op": "GT"
    },
    "977": {
      "op": "ISZERO"
    },
    "978": {
      "op": "PUSH2",
      "value": "0x3DA"
    },
    "981": {
      "op": "JUMPI"
    },
    "982": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "984": {
      "op": "DUP1"
    },
    "985": {
      "op": "REVERT"
    },
    "986": {
      "op": "JUMPDEST"
    },
    "987": {
      "op": "DUP3"
    },
    "988": {
      "op": "MLOAD"
    },
    "989": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "995": {
      "op": "DUP2"
    },
    "996": {
      "op": "GT"
    },
    "997": {
      "op": "DUP3"
    },
    "998": {
      "op": "DUP3"
    },
    "999": {
      "op": "ADD"
    },
    "1000": {
      "op": "DUP9"
    },
    "1001": {
      "op": "LT"
    },
    "1002": {
      "op": "OR"
    },
    "1003": {
      "op": "ISZERO"
    },
    "1004": {
      "op": "PUSH2",
      "value": "0x3F4"
    },
    "1007": {
      "op": "JUMPI"
    },
    "1008": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1010": {
      "op": "DUP1"
    },
    "1011": {
      "op": "REVERT"
    },
    "1012": {
      "op": "JUMPDEST"
    },
    "1013": {
      "op": "DUP3"
    },
    "1014": {
      "op": "MSTORE"
    },
    "1015": {
      "op": "POP"
    },
    "1016": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1017": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1018": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1020": {
      "op": "SWAP2"
    },
    "1021": {
      "op": "DUP3"
    },
    "1022": {
      "op": "ADD"
    },
    "1023": {
      "op": "SWAP3"
    },
    "1024": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1025": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1026": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "1027": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1028": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1029": {
      "op": "DUP4"
    },
    "1030": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1031": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1033": {
      "op": "JUMPDEST"
    },
    "1034": {
      "op": "DUP4"
    },
    "1035": {
      "op": "DUP2"
    },
    "1036": {
      "op": "LT"
    },
    "1037": {
      "op": "ISZERO"
    },
    "1038": {
      "op": "PUSH2",
      "value": "0x421"
    },
    "1041": {
      "op": "JUMPI"
    },
    "1042": {
      "op": "DUP2"
    },
    "1043": {
      "op": "DUP2"
    },
    "1044": {
      "op": "ADD"
    },
    "1045": {
      "op": "MLOAD"
    },
    "1046": {
      "op": "DUP4"
    },
    "1047": {
      "op": "DUP3"
    },
    "1048": {
      "op": "ADD"
    },
    "1049": {
      "op": "MSTORE"
    },
    "1050": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1052": {
      "op": "ADD"
    },
    "1053": {
      "op": "PUSH2",
      "value": "0x409"
    },
    "1056": {
      "op": "JUMP"
    },
    "1057": {
      "op": "JUMPDEST"
    },
    "1058": {
      "op": "POP"
    },
    "1059": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1060": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1061": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1062": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1063": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1064": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1065": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1066": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "1067": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1068": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1070": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "1071": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1072": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1073": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x44E"
    },
    "1076": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1077": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1078": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1079": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "1080": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1081": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1082": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1084": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1085": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1087": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "1088": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "1091": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "EXP",
      "path": "2"
    },
    "1092": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SUB",
      "path": "2"
    },
    "1093": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "NOT",
      "path": "2"
    },
    "1094": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "AND",
      "path": "2"
    },
    "1095": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1096": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1097": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1099": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "ADD",
      "path": "2"
    },
    "1100": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1101": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1102": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1103": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1104": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1106": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1107": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1108": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1109": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1017,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1110": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1111": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1112": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "1113": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1114": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1115": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "SWAP8",
      "path": "2"
    },
    "1116": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1117": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1118": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "1119": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1120": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1121": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "SWAP10",
      "path": "2"
    },
    "1122": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1123": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1124": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "SWAP11",
      "path": "2"
    },
    "1125": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1126": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1127": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1128": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1129": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1130": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        968,
        1044
      ],
      "op": "POP",
      "path": "2"
    },
    "1131": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1054,
        1070
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1133": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1100,
        1109
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1134": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1111,
        1121
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1135": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1123,
        1127
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1136": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1138": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1139": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1141": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "ADD",
      "path": "2"
    },
    "1142": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1143": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1144": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1146": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1148": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1150": {
      "op": "SHL"
    },
    "1151": {
      "op": "SUB"
    },
    "1152": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "AND",
      "path": "2"
    },
    "1153": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1155": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1157": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1159": {
      "op": "SHL"
    },
    "1160": {
      "op": "SUB"
    },
    "1161": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "AND",
      "path": "2"
    },
    "1162": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1164": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "SHL",
      "path": "2"
    },
    "1165": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1166": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1167": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x14"
    },
    "1169": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "ADD",
      "path": "2"
    },
    "1170": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1171": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1172": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1173": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1175": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "ADD",
      "path": "2"
    },
    "1176": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1177": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1178": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1179": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1180": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1182": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "ADD",
      "path": "2"
    },
    "1183": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1184": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1185": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1186": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1187": {
      "op": "JUMPDEST"
    },
    "1188": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1190": {
      "op": "DUP4"
    },
    "1191": {
      "op": "LT"
    },
    "1192": {
      "op": "PUSH2",
      "value": "0x4C2"
    },
    "1195": {
      "op": "JUMPI"
    },
    "1196": {
      "op": "DUP1"
    },
    "1197": {
      "op": "MLOAD"
    },
    "1198": {
      "op": "DUP3"
    },
    "1199": {
      "op": "MSTORE"
    },
    "1200": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1202": {
      "op": "NOT"
    },
    "1203": {
      "op": "SWAP1"
    },
    "1204": {
      "op": "SWAP3"
    },
    "1205": {
      "op": "ADD"
    },
    "1206": {
      "op": "SWAP2"
    },
    "1207": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1209": {
      "op": "SWAP2"
    },
    "1210": {
      "op": "DUP3"
    },
    "1211": {
      "op": "ADD"
    },
    "1212": {
      "op": "SWAP2"
    },
    "1213": {
      "op": "ADD"
    },
    "1214": {
      "op": "PUSH2",
      "value": "0x4A3"
    },
    "1217": {
      "op": "JUMP"
    },
    "1218": {
      "op": "JUMPDEST"
    },
    "1219": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1221": {
      "op": "DUP4"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1224": {
      "op": "SUB"
    },
    "1225": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1228": {
      "op": "EXP"
    },
    "1229": {
      "op": "SUB"
    },
    "1230": {
      "op": "DUP1"
    },
    "1231": {
      "op": "NOT"
    },
    "1232": {
      "op": "DUP3"
    },
    "1233": {
      "op": "MLOAD"
    },
    "1234": {
      "op": "AND"
    },
    "1235": {
      "op": "DUP2"
    },
    "1236": {
      "op": "DUP5"
    },
    "1237": {
      "op": "MLOAD"
    },
    "1238": {
      "op": "AND"
    },
    "1239": {
      "op": "DUP1"
    },
    "1240": {
      "op": "DUP3"
    },
    "1241": {
      "op": "OR"
    },
    "1242": {
      "op": "DUP6"
    },
    "1243": {
      "op": "MSTORE"
    },
    "1244": {
      "op": "POP"
    },
    "1245": {
      "op": "POP"
    },
    "1246": {
      "op": "POP"
    },
    "1247": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1248": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1249": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1250": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1251": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1252": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "ADD",
      "path": "2"
    },
    "1253": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1254": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1255": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1256": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1257": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "POP",
      "path": "2"
    },
    "1258": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1260": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1261": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1263": {
      "op": "DUP2"
    },
    "1264": {
      "op": "DUP4"
    },
    "1265": {
      "op": "SUB"
    },
    "1266": {
      "op": "SUB"
    },
    "1267": {
      "op": "DUP2"
    },
    "1268": {
      "op": "MSTORE"
    },
    "1269": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1270": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1272": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1083,
        1128
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1273": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1073,
        1129
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1274": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1073,
        1129
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1275": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1073,
        1129
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1276": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1073,
        1129
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1278": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1073,
        1129
      ],
      "op": "ADD",
      "path": "2"
    },
    "1279": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1073,
        1129
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1280": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1054,
        1129
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1281": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1054,
        1129
      ],
      "op": "POP",
      "path": "2"
    },
    "1282": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1139,
        1159
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1284": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1162,
        1200
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x50C"
    },
    "1287": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1191,
        1199
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1288": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1162,
        1190
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5E4"
    },
    "1291": {
      "fn": "ClaimVerifier.claimIsValid",
      "jump": "i",
      "offset": [
        1162,
        1200
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1292": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1162,
        1200
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1293": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1139,
        1200
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1294": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1139,
        1200
      ],
      "op": "POP",
      "path": "2"
    },
    "1295": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1211,
        1228
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1297": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1231,
        1263
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x51A"
    },
    "1300": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1245,
        1257
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1301": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1259,
        1262
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1302": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1231,
        1244
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x635"
    },
    "1305": {
      "fn": "ClaimVerifier.claimIsValid",
      "jump": "i",
      "offset": [
        1231,
        1263
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1306": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1231,
        1263
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1307": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1211,
        1263
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1308": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1211,
        1263
      ],
      "op": "POP",
      "path": "2"
    },
    "1309": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1274,
        1292
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1311": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1316,
        1325
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1312": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1314": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1315": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1317": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "ADD",
      "path": "2"
    },
    "1318": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1319": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1320": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1322": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1324": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1326": {
      "op": "SHL"
    },
    "1327": {
      "op": "SUB"
    },
    "1328": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "AND",
      "path": "2"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1333": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1335": {
      "op": "SHL"
    },
    "1336": {
      "op": "SUB"
    },
    "1337": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "AND",
      "path": "2"
    },
    "1338": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1339": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1340": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1342": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "ADD",
      "path": "2"
    },
    "1343": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1344": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "POP",
      "path": "2"
    },
    "1345": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "POP",
      "path": "2"
    },
    "1346": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1348": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1349": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1351": {
      "op": "DUP2"
    },
    "1352": {
      "op": "DUP4"
    },
    "1353": {
      "op": "SUB"
    },
    "1354": {
      "op": "SUB"
    },
    "1355": {
      "op": "DUP2"
    },
    "1356": {
      "op": "MSTORE"
    },
    "1357": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1358": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1360": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1305,
        1326
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1361": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1295,
        1327
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1362": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1295,
        1327
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1363": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1295,
        1327
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1364": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1295,
        1327
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1366": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1295,
        1327
      ],
      "op": "ADD",
      "path": "2"
    },
    "1367": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1295,
        1327
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1368": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1274,
        1327
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1369": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1274,
        1327
      ],
      "op": "POP",
      "path": "2"
    },
    "1370": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1359
      ],
      "op": "DUP14",
      "path": "2",
      "statement": 5
    },
    "1371": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1373": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1375": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1377": {
      "op": "SHL"
    },
    "1378": {
      "op": "SUB"
    },
    "1379": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1373
      ],
      "op": "AND",
      "path": "2"
    },
    "1380": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1373
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD202158D"
    },
    "1385": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1374,
        1384
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1386": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1386,
        1387
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1388": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1390": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1391": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1392": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xFFFFFFFF"
    },
    "1397": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "AND",
      "path": "2"
    },
    "1398": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "1400": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "SHL",
      "path": "2"
    },
    "1401": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1402": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1403": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1405": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "ADD",
      "path": "2"
    },
    "1406": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1407": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1408": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1409": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1410": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1412": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "ADD",
      "path": "2"
    },
    "1413": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1414": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1415": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1416": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1418": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "ADD",
      "path": "2"
    },
    "1419": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1420": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1421": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1422": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1423": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1425": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1427": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1428": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1429": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1430": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "SUB",
      "path": "2"
    },
    "1431": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1432": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1433": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1434": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "1435": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1436": {
      "op": "DUP1"
    },
    "1437": {
      "op": "ISZERO"
    },
    "1438": {
      "op": "PUSH2",
      "value": "0x5A6"
    },
    "1441": {
      "op": "JUMPI"
    },
    "1442": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1444": {
      "op": "DUP1"
    },
    "1445": {
      "op": "REVERT"
    },
    "1446": {
      "op": "JUMPDEST"
    },
    "1447": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1448": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "GAS",
      "path": "2"
    },
    "1449": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "1450": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1451": {
      "op": "DUP1"
    },
    "1452": {
      "op": "ISZERO"
    },
    "1453": {
      "op": "PUSH2",
      "value": "0x5BA"
    },
    "1456": {
      "op": "JUMPI"
    },
    "1457": {
      "op": "RETURNDATASIZE"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1460": {
      "op": "DUP1"
    },
    "1461": {
      "op": "RETURNDATACOPY"
    },
    "1462": {
      "op": "RETURNDATASIZE"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1465": {
      "op": "REVERT"
    },
    "1466": {
      "op": "JUMPDEST"
    },
    "1467": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1468": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1469": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1470": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "POP",
      "path": "2"
    },
    "1471": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1473": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1474": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1475": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1477": {
      "op": "DUP2"
    },
    "1478": {
      "op": "LT"
    },
    "1479": {
      "op": "ISZERO"
    },
    "1480": {
      "op": "PUSH2",
      "value": "0x5D0"
    },
    "1483": {
      "op": "JUMPI"
    },
    "1484": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1486": {
      "op": "DUP1"
    },
    "1487": {
      "op": "REVERT"
    },
    "1488": {
      "op": "JUMPDEST"
    },
    "1489": {
      "op": "POP"
    },
    "1490": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1491": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        1345,
        1388
      ],
      "op": "SWAP15",
      "path": "2"
    },
    "1492": {
      "fn": "ClaimVerifier.claimIsValid",
      "offset": [
        629,
        1395
      ],
      "op": "SWAP14",
      "path": "2"
    },
    "1493": {
      "op": "POP"
    },
    "1494": {
      "op": "POP"
    },
    "1495": {
      "op": "POP"
    },
    "1496": {
      "op": "POP"
    },
    "1497": {
      "op": "POP"
    },
    "1498": {
      "op": "POP"
    },
    "1499": {
      "op": "POP"
    },
    "1500": {
      "op": "POP"
    },
    "1501": {
      "op": "POP"
    },
    "1502": {
      "op": "POP"
    },
    "1503": {
      "op": "POP"
    },
    "1504": {
      "op": "POP"
    },
    "1505": {
      "op": "POP"
    },
    "1506": {
      "op": "POP"
    },
    "1507": {
      "fn": "ClaimVerifier.claimIsValid",
      "jump": "o",
      "offset": [
        629,
        1395
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1508": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3560,
        3825
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1509": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 6,
      "value": "0x40"
    },
    "1511": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1512": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1513": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "PUSH32",
      "path": "21",
      "value": "0x19457468657265756D205369676E6564204D6573736167653A0A333200000000"
    },
    "1546": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x20"
    },
    "1548": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1549": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "DUP4",
      "path": "21"
    },
    "1550": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "ADD",
      "path": "21"
    },
    "1551": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1552": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1553": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1554": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1555": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x3C"
    },
    "1557": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1558": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "DUP4",
      "path": "21"
    },
    "1559": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "ADD",
      "path": "21"
    },
    "1560": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP5",
      "path": "21"
    },
    "1561": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1562": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP5",
      "path": "21"
    },
    "1563": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1564": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "DUP3",
      "path": "21"
    },
    "1565": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1566": {
      "op": "DUP1"
    },
    "1567": {
      "op": "DUP4"
    },
    "1568": {
      "op": "SUB"
    },
    "1569": {
      "op": "SWAP1"
    },
    "1570": {
      "op": "SWAP5"
    },
    "1571": {
      "op": "ADD"
    },
    "1572": {
      "op": "DUP5"
    },
    "1573": {
      "op": "MSTORE"
    },
    "1574": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x5C"
    },
    "1576": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1577": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1578": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "ADD",
      "path": "21"
    },
    "1579": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1580": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1581": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3759,
        3817
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1582": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3749,
        3818
      ],
      "op": "DUP2",
      "path": "21"
    },
    "1583": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3749,
        3818
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1584": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3749,
        3818
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1585": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3749,
        3818
      ],
      "op": "ADD",
      "path": "21"
    },
    "1586": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3749,
        3818
      ],
      "op": "KECCAK256",
      "path": "21"
    },
    "1587": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "offset": [
        3749,
        3818
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1588": {
      "fn": "ECDSA.toEthSignedMessageHash",
      "jump": "o",
      "offset": [
        3560,
        3825
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1589": {
      "fn": "ECDSA.recover",
      "offset": [
        1229,
        3294
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1590": {
      "fn": "ECDSA.recover",
      "offset": [
        1307,
        1314
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "1592": {
      "fn": "ECDSA.recover",
      "offset": [
        1368,
        1377
      ],
      "op": "DUP2",
      "path": "21"
    },
    "1593": {
      "fn": "ECDSA.recover",
      "offset": [
        1368,
        1384
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1594": {
      "fn": "ECDSA.recover",
      "offset": [
        1388,
        1390
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x41"
    },
    "1596": {
      "branch": 12,
      "fn": "ECDSA.recover",
      "offset": [
        1368,
        1390
      ],
      "op": "EQ",
      "path": "21"
    },
    "1597": {
      "fn": "ECDSA.recover",
      "offset": [
        1364,
        1436
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x648"
    },
    "1600": {
      "branch": 12,
      "fn": "ECDSA.recover",
      "offset": [
        1364,
        1436
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "1601": {
      "op": "POP"
    },
    "1602": {
      "fn": "ECDSA.recover",
      "offset": [
        1422,
        1423
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 7,
      "value": "0x0"
    },
    "1604": {
      "fn": "ECDSA.recover",
      "offset": [
        1406,
        1425
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x6F7"
    },
    "1607": {
      "fn": "ECDSA.recover",
      "offset": [
        1406,
        1425
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1608": {
      "fn": "ECDSA.recover",
      "offset": [
        1364,
        1436
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1609": {
      "fn": "ECDSA.recover",
      "offset": [
        1786,
        1788
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x20"
    },
    "1611": {
      "fn": "ECDSA.recover",
      "offset": [
        1771,
        1789
      ],
      "op": "DUP3",
      "path": "21"
    },
    "1612": {
      "fn": "ECDSA.recover",
      "offset": [
        1771,
        1789
      ],
      "op": "ADD",
      "path": "21"
    },
    "1613": {
      "fn": "ECDSA.recover",
      "offset": [
        1765,
        1790
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1614": {
      "fn": "ECDSA.recover",
      "offset": [
        1829,
        1831
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "1616": {
      "fn": "ECDSA.recover",
      "offset": [
        1814,
        1832
      ],
      "op": "DUP4",
      "path": "21"
    },
    "1617": {
      "fn": "ECDSA.recover",
      "offset": [
        1814,
        1832
      ],
      "op": "ADD",
      "path": "21"
    },
    "1618": {
      "fn": "ECDSA.recover",
      "offset": [
        1808,
        1833
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1619": {
      "fn": "ECDSA.recover",
      "offset": [
        1880,
        1882
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x60"
    },
    "1621": {
      "fn": "ECDSA.recover",
      "offset": [
        1865,
        1883
      ],
      "op": "DUP5",
      "path": "21"
    },
    "1622": {
      "fn": "ECDSA.recover",
      "offset": [
        1865,
        1883
      ],
      "op": "ADD",
      "path": "21"
    },
    "1623": {
      "fn": "ECDSA.recover",
      "offset": [
        1859,
        1884
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1624": {
      "fn": "ECDSA.recover",
      "offset": [
        1502,
        1511
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "1626": {
      "fn": "ECDSA.recover",
      "offset": [
        1851,
        1885
      ],
      "op": "BYTE",
      "path": "21"
    },
    "1627": {
      "fn": "ECDSA.recover",
      "offset": [
        3032,
        3034
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x1B"
    },
    "1629": {
      "fn": "ECDSA.recover",
      "offset": [
        3028,
        3034
      ],
      "op": "DUP2",
      "path": "21"
    },
    "1630": {
      "branch": 13,
      "fn": "ECDSA.recover",
      "offset": [
        3028,
        3034
      ],
      "op": "LT",
      "path": "21"
    },
    "1631": {
      "fn": "ECDSA.recover",
      "offset": [
        3024,
        3068
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "1632": {
      "fn": "ECDSA.recover",
      "offset": [
        3024,
        3068
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x667"
    },
    "1635": {
      "branch": 13,
      "fn": "ECDSA.recover",
      "offset": [
        3024,
        3068
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "1636": {
      "fn": "ECDSA.recover",
      "offset": [
        3055,
        3057
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 8,
      "value": "0x1B"
    },
    "1638": {
      "fn": "ECDSA.recover",
      "offset": [
        3050,
        3057
      ],
      "op": "ADD",
      "path": "21"
    },
    "1639": {
      "fn": "ECDSA.recover",
      "offset": [
        3024,
        3068
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1640": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3083
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1641": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3089
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0xFF"
    },
    "1643": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3089
      ],
      "op": "AND",
      "path": "21"
    },
    "1644": {
      "fn": "ECDSA.recover",
      "offset": [
        3087,
        3089
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x1B"
    },
    "1646": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3089
      ],
      "op": "EQ",
      "path": "21"
    },
    "1647": {
      "branch": 14,
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3089
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "1648": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3100
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1649": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3100
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "1650": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3100
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x67F"
    },
    "1653": {
      "branch": 14,
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3100
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "1654": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3100
      ],
      "op": "POP",
      "path": "21"
    },
    "1655": {
      "fn": "ECDSA.recover",
      "offset": [
        3093,
        3094
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1656": {
      "fn": "ECDSA.recover",
      "offset": [
        3093,
        3100
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0xFF"
    },
    "1658": {
      "fn": "ECDSA.recover",
      "offset": [
        3093,
        3100
      ],
      "op": "AND",
      "path": "21"
    },
    "1659": {
      "fn": "ECDSA.recover",
      "offset": [
        3098,
        3100
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x1C"
    },
    "1661": {
      "fn": "ECDSA.recover",
      "offset": [
        3093,
        3100
      ],
      "op": "EQ",
      "path": "21"
    },
    "1662": {
      "branch": 15,
      "fn": "ECDSA.recover",
      "offset": [
        3093,
        3100
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "1663": {
      "fn": "ECDSA.recover",
      "offset": [
        3082,
        3100
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1664": {
      "fn": "ECDSA.recover",
      "offset": [
        3078,
        3144
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "1665": {
      "fn": "ECDSA.recover",
      "offset": [
        3078,
        3144
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x690"
    },
    "1668": {
      "branch": 15,
      "fn": "ECDSA.recover",
      "offset": [
        3078,
        3144
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "1669": {
      "fn": "ECDSA.recover",
      "offset": [
        3131,
        3132
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 9,
      "value": "0x0"
    },
    "1671": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "SWAP4",
      "path": "21"
    },
    "1672": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "POP",
      "path": "21"
    },
    "1673": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "POP",
      "path": "21"
    },
    "1674": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "POP",
      "path": "21"
    },
    "1675": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "POP",
      "path": "21"
    },
    "1676": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x6F7"
    },
    "1679": {
      "fn": "ECDSA.recover",
      "offset": [
        3116,
        3133
      ],
      "op": "JUMP",
      "path": "21"
    },
    "1680": {
      "fn": "ECDSA.recover",
      "offset": [
        3078,
        3144
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1681": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 10,
      "value": "0x40"
    },
    "1683": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1684": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1685": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "1687": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP2",
      "path": "21"
    },
    "1688": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1689": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x20"
    },
    "1691": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1692": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP3",
      "path": "21"
    },
    "1693": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1694": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1695": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP5",
      "path": "21"
    },
    "1696": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1697": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP10",
      "path": "21"
    },
    "1698": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1699": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1700": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0xFF"
    },
    "1702": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP5",
      "path": "21"
    },
    "1703": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "AND",
      "path": "21"
    },
    "1704": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP3",
      "path": "21"
    },
    "1705": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP5",
      "path": "21"
    },
    "1706": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1707": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1708": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x60"
    },
    "1710": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP3",
      "path": "21"
    },
    "1711": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1712": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP7",
      "path": "21"
    },
    "1713": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1714": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1715": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x80"
    },
    "1717": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP3",
      "path": "21"
    },
    "1718": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1719": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP6",
      "path": "21"
    },
    "1720": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1721": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "1722": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1723": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1724": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x1"
    },
    "1726": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "1727": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0xA0"
    },
    "1729": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP1",
      "path": "21"
    },
    "1730": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP5",
      "path": "21"
    },
    "1731": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1732": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP4",
      "path": "21"
    },
    "1733": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1734": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1737": {
      "op": "NOT"
    },
    "1738": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP2",
      "path": "21"
    },
    "1739": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1740": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "1741": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP2",
      "path": "21"
    },
    "1742": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1743": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SUB",
      "path": "21"
    },
    "1744": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1745": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1746": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ADD",
      "path": "21"
    },
    "1747": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "1748": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "DUP6",
      "path": "21"
    },
    "1749": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "GAS",
      "path": "21"
    },
    "1750": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "STATICCALL",
      "path": "21"
    },
    "1751": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "1752": {
      "op": "DUP1"
    },
    "1753": {
      "op": "ISZERO"
    },
    "1754": {
      "op": "PUSH2",
      "value": "0x6E7"
    },
    "1757": {
      "op": "JUMPI"
    },
    "1758": {
      "op": "RETURNDATASIZE"
    },
    "1759": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1761": {
      "op": "DUP1"
    },
    "1762": {
      "op": "RETURNDATACOPY"
    },
    "1763": {
      "op": "RETURNDATASIZE"
    },
    "1764": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1766": {
      "op": "REVERT"
    },
    "1767": {
      "op": "JUMPDEST"
    },
    "1768": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1769": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1770": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1771": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x20"
    },
    "1773": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "1775": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1776": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "SUB",
      "path": "21"
    },
    "1777": {
      "fn": "ECDSA.recover",
      "offset": [
        3245,
        3269
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "1778": {
      "fn": "ECDSA.recover",
      "offset": [
        3238,
        3269
      ],
      "op": "SWAP4",
      "path": "21"
    },
    "1779": {
      "fn": "ECDSA.recover",
      "offset": [
        3238,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1780": {
      "fn": "ECDSA.recover",
      "offset": [
        3238,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1781": {
      "fn": "ECDSA.recover",
      "offset": [
        3238,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1782": {
      "fn": "ECDSA.recover",
      "offset": [
        3238,
        3269
      ],
      "op": "POP",
      "path": "21"
    },
    "1783": {
      "fn": "ECDSA.recover",
      "offset": [
        1229,
        3294
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "1784": {
      "fn": "ECDSA.recover",
      "offset": [
        1229,
        3294
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "1785": {
      "fn": "ECDSA.recover",
      "offset": [
        1229,
        3294
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "1786": {
      "fn": "ECDSA.recover",
      "offset": [
        1229,
        3294
      ],
      "op": "POP",
      "path": "21"
    },
    "1787": {
      "fn": "ECDSA.recover",
      "offset": [
        1229,
        3294
      ],
      "op": "POP",
      "path": "21"
    },
    "1788": {
      "fn": "ECDSA.recover",
      "jump": "o",
      "offset": [
        1229,
        3294
      ],
      "op": "JUMP",
      "path": "21"
    }
  },
  "sha1": "4506f2e0e3963e823d77cdcd23e17114181eb84e",
  "source": "pragma solidity ^0.5.4;\nimport \"./interfaces/bases/IIdentity.sol\";\nimport \"./libraries/ECDSA.sol\";\n\ncontract ClaimVerifier {\n    event ClaimValid(IIdentity _identity, uint256 claimType);\n    event ClaimInvalid(IIdentity _identity, uint256 claimType);\n\n    function checkClaim(IIdentity _trustedIssuer, IIdentity _identity, uint256 _claimType) public returns (bool) {\n        if (claimIsValid(_trustedIssuer, _identity, _claimType)) {\n            emit ClaimValid(_identity, _claimType);\n            return true;\n        } else {\n            emit ClaimInvalid(_identity, _claimType);\n            return false;\n        }\n    }\n\n    function claimIsValid(IIdentity _trustedIssuer, IIdentity _identity, uint256 _claimType) public returns (bool) {\n        uint256 foundClaimType;\n        uint256 scheme;\n        address issuer;\n        bytes memory sig;\n        bytes memory data;\n\n        bytes32 claimId = keccak256(abi.encodePacked(_trustedIssuer, _claimType));\n\n        ( foundClaimType, scheme, issuer, sig, data, ) = _identity.getClaim(claimId);\n        bytes32 dataHash = keccak256(abi.encodePacked(_identity, _claimType, data));\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash(dataHash);\n\n        address recovered = ECDSA.recover(prefixedHash, sig);\n\n        bytes32 hashedAddr = keccak256(abi.encode(recovered));\n\n        return _trustedIssuer.keyHasPurpose(hashedAddr, 3);\n    }\n}\n",
  "sourceMap": "100:1297:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;100:1297:2;;;;;;;",
  "sourcePath": "contracts/ClaimVerifer.sol",
  "type": "contract"
}